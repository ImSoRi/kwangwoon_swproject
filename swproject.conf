input {  
        beats {
		port => 5044	
	}
}
filter {  
	grok {
                match => { "message" => ["%{IPORHOST:clientip} (?:-|%{USER:ident}) (?:-|%{USER:auth}) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:httpMethod} %{NOTSPACE:uri}(?: HTTP/%{NUMBER:httpversion})?|-)\" %{NUMBER:responseCode} (?:-|%{NUMBER:bytes})( \"%{DATA:referrer}\")?( \"%{DATA:user-agent}\")?"] }
                remove_field => ["timestamp","@version","path","tags","httpversion","bytes2"]
        }
        geoip {
                source => "clientip"
		target => "geoip"
        }
	if "_grokparsefailure" in [tags] {
		drop{}
	}
        useragent {
                source => "user-agent"
        }

	dissect {
  	mapping => { "message" => "%{clientip} %{+another} %{+another} [%{day}/%{month}/%{year}:%{hour}:%{min}:%{sec} %{timezone}]%{another}" }
  	}
	mutate { 
		add_field => {
			daytime => "%{hour}:%{min}:%{sec}"
		}
	}
	mutate {
		add_field => {
			daydate => "%{year}/%{month}/%{day}"
		}
	}
        if [os_major]  {
                mutate {
                        add_field => {
                                os_combine => "%{os} %{os_major}.%{os_minor}"
                        }
                }
        } else {
                 mutate {
                        add_field => {
                                os_combine => "%{os}"
                        }
                }
        }
        if [os] =~ "Windows" {
                mutate {
                        update => {
                                "os_name" => "Windows"
                        }
                }
        }
        if [os] =~ "Mac" {
                mutate {
                        update => {
                                "os_name" => "Mac"
                        }
                }
        }
}
output {  
        elasticsearch { hosts => ["localhost:9200"] }
        stdout { codec => rubydebug }
}
